{"version":3,"sources":["webpack:///./src/$_lazy_route_resource lazy namespace object","webpack:///./src/app/app.component.css","webpack:///./src/app/app.component.html","webpack:///./src/app/app.component.ts","webpack:///./src/app/app.module.ts","webpack:///./src/app/dataService.component.ts","webpack:///./src/app/myModal.component.html","webpack:///./src/app/myModal.component.ts","webpack:///./src/environments/environment.ts","webpack:///./src/main.ts"],"names":[],"mappings":"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","file":"main.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./src/$$_lazy_route_resource lazy recursive\";","module.exports = \".olololo{\\r\\n\\twidth: 800px;\\r\\n\\t min-width: 800px;\\r\\n}\\r\\n.di1{\\r\\n\\twidth: 50%;\\r\\n\\tbackground-color: blue;\\r\\n\\r\\n}\\r\\n.di2{\\r\\n\\tbackground-color: red;\\r\\n\\twidth: 50%;\\r\\n}\\r\\n.di2.di1{\\r\\n\\tborder-color: black;\\r\\n\\tborder : solid ;\\r\\n}\"","module.exports = \"<nav class=\\\"navbar navbar-expand-lg navbar-dark bg-dark\\\">\\n   <div class=\\\"collapse navbar-collapse\\\">\\n    <ul class=\\\"navbar-nav mr-auto mt-2 mt-lg-0\\\">\\n      <li class=\\\"nav-item active\\\">\\n        <span class=\\\"nav-link\\\">Hapoalim application</span>\\n      </li>\\n    </ul>\\n    \\n  </div>\\n</nav>\\n\\n \\n <div style=\\\"margin: 20px\\\">\\n<p-panel  header=\\\"Select file and send\\\">\\n  <div class=\\\"ui-g\\\">\\n   <label style=\\\"margin-right: 50px\\\" for=\\\"importButton\\\">Select file: </label>\\n          <p-fileUpload #form mode=\\\"basic\\\" id=\\\"importButton\\\" (uploadHandler)=\\\"sendImg($event, form)\\\" customUpload=\\\"true\\\" auto=\\\"true\\\"  name=\\\"file\\\"  chooseLabel=\\\"Select file\\\" >\\n  </p-fileUpload>\\n</div>\\n</p-panel>\\n</div>\\n\\n<div class=\\\"ui-g\\\">\\n   <div class=\\\"ui-g-2\\\"> </div>\\n    <div class=\\\"ui-g-8\\\"> \\n          <p-panel [style]=\\\"{width: 'auto'}\\\" styleClass=\\\"ui-card-shadow\\\">\\n            <p-header>\\n              Result\\n            </p-header>\\n\\n            <div *ngIf=\\\"showLoadSpinner\\\" class=\\\"ui-g\\\">\\n                <div class=\\\"ui-g-5\\\"> </div>\\n                <div class=\\\"ui-g-2\\\">\\n                  <p-progressSpinner  [style]=\\\"{width: '50px', height: '50px'}\\\" strokeWidth=\\\"8\\\" fill=\\\"#EEEEEE\\\"                 animationDuration=\\\".5s\\\"></p-progressSpinner> \\n                </div>\\n                <div class=\\\"ui-g-5\\\"> </div>\\n             </div>\\n\\n            <div class=\\\"ui-g\\\">        \\n                <div class=\\\"ui-g-3\\\"> </div>\\n                <div class=\\\"ui-g-6\\\"> \\n                      <div>{{showMessage}}</div>\\n                </div>\\n                <div class=\\\"ui-g-3\\\"></div>\\n            </div>\\n\\n\\n\\n            <p-footer>\\n              <button pButton type=\\\"button\\\" label=\\\"Clean\\\" (click)=\\\"clenAll()\\\" icon=\\\"pi pi-check\\\" style=\\\"margin-right: .25em\\\"></button>\\n            </p-footer>\\n         </p-panel>\\n        \\n    </div>\\n     <div class=\\\"ui-g-2\\\"> </div>\\n</div>\\n\\n \"","import { Component } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport {BsModalService, BsModalRef } from 'ngx-bootstrap/modal';\nimport {MyModal} from './myModal.component'\nimport {FileUploadModule} from 'primeng/fileupload';\nimport {CardModule} from 'primeng/card';\n \nimport {Subscription} from 'rxjs';\nimport { Injectable } from '@angular/core';\nimport {DataService} from './dataService.component'\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent {\n  private subscriptions: Array<Subscription> = [];\n  showLoadSpinner=false;\n  operationNumber:any;\n  operationResult:any;\n  repeatInterval:any;\n  showMessage:string;\n  fd:FormData;\n  constructor(public modalService: BsModalService, private dataService: DataService){\n\n  }\n\n  openModal(){\n    this.modalService.show(MyModal, Object.assign({},{}, { class: 'olololo' }))\n  }\n\n  ngOnInit(){\n    this.showMessage=\"please load customer Id image\";\n    this.operationNumber=0;\n  }\n  sendImg(event, form){\n    this.operationResult=null;\n    this.showLoadSpinner=true;\n    this.showMessage=\"waiting server response for operation: \"+this.operationNumber;\n      this.fd = new FormData();\n      this.fd.append('file', event.files[0]);\n      this.dataService.insertData(this.fd).subscribe(response=>{\n        if(JSON.stringify(response)!=\"-1\"){\n          console.log(\"\"+response);\n          this.operationNumber=JSON.stringify(response); this.startAskForResponse();\n          form.clear();\n        }else{\n          console.log(\"wrong file\");\n          this.clenAll()\n        }\n\n      },error=>{console.log(\"ERRR\");form.clear();});      \n  }\n\n  checkForResult(opId:string){\n    this.dataService.getOperationResult(opId).subscribe(response=>{\n        console.log(response);this.operationResult= response;this.showMessage=JSON.stringify(response) },error=>{console.log(\"ERRR\")});\n  }\n    startAskForResponse(){\n      var retry = 0;\n      this.repeatInterval = setInterval(()=>{\n        ++retry;\n        if(retry>20){\n          console.log(\"timeout stoped after 100 retry\")\n          this.showLoadSpinner=false;\n          clearInterval(this.repeatInterval);\n        }\n        this.checkForResult(this.operationNumber);\n        console.log(this.operationResult);\n         \n        if(this.operationResult && this.operationResult.status){          \n            if(this.operationResult.status===\"OPERATION_COMPLETE\" || this.operationResult.status===\"IMG_NOT_RECOGNIZED\"){\n              clearInterval(this.repeatInterval);\n              this.showLoadSpinner=false;\n              console.log(\"OP COMPLETE stop\");\n              this.operationResult=null;\n            }\n        }\n      },500);\n    }  \n  \n  clenAll(){ \n\n    this.showMessage=\"please load customer Id image\";\n    this.subscriptions.forEach((subscription: Subscription) => {\n      subscription.unsubscribe();\n    });\n  }\n}\n","import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\n\nimport { AppComponent } from './app.component';\nimport { MyModal } from './myModal.component';\nimport { ModalModule } from 'ngx-bootstrap/modal';\nimport {OverlayPanelModule} from 'primeng/overlaypanel';\nimport {FileUploadModule} from 'primeng/fileupload';\nimport {CardModule} from 'primeng/card';\nimport {ProgressSpinnerModule} from 'primeng/progressspinner';\nimport {BrowserAnimationsModule} from '@angular/platform-browser/animations';\nimport {PanelModule} from 'primeng/panel';\nimport { HttpClientModule } from '@angular/common/http';\nimport {DataService} from './dataService.component'\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    MyModal\n  ],\n  imports: [\n    BrowserModule,\n    ModalModule.forRoot(),\n    OverlayPanelModule,\n    BrowserAnimationsModule,\n    FileUploadModule,\n    CardModule,\n    ProgressSpinnerModule,\n    PanelModule,\n    HttpClientModule\n\n  ],\n  providers: [\n    DataService],\n  bootstrap: [AppComponent],\n  entryComponents:[MyModal]\n})\nexport class AppModule { }\n","import { Injectable } from '@angular/core';\r\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\r\n\r\nconst httpOptions = {\r\n  headers: new HttpHeaders({ 'Content-Type': 'multipart/form-data' })\r\n};\r\n\r\n@Injectable()\r\nexport class DataService {\r\n\r\n  constructor(private http: HttpClient) {}\r\n\r\n  insertData(data:any) { \r\n    return this.http.post('http://localhost:8080/file', data);\r\n  }\r\n  getOperationResult(operationId:string) {\r\n    return this.http.get('http://localhost:8080/getResultById/'+operationId);\r\n  }\r\n\r\n}","module.exports = \"<div>Hello</div>\\r\\n<button type=\\\"button\\\" (click)=\\\"op.toggle($event)\\\" class=\\\"btn btn-primary\\\">\\r\\n      Single Button\\r\\n    </button>\\r\\n<p-overlayPanel [style]=\\\"{width: '400px'}\\\" [appendTo]=\\\"'body'\\\" baseZIndex=1050 #op>\\r\\n    HOP HEY\\r\\n</p-overlayPanel>\"","import { Component } from '@angular/core';\r\n\r\n\r\n@Component({ \r\n  \r\n  templateUrl: './myModal.component.html',\r\n  styleUrls: []\r\n})\r\nexport class MyModal { \r\n   \r\n}\r\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n\n"],"sourceRoot":""}